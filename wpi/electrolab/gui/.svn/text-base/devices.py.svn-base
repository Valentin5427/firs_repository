# -*- coding: UTF-8 -*-

'''
Created on 2.08.2015

@author: atol
'''

from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QMessageBox, QWidget, QIcon, QFont
from PyQt4.QtCore import pyqtSlot, pyqtSignal, QVariant, QObject
from serial import Serial
from serial.serialutil import SerialException
from electrolab.gui.common import UILoader
from electrolab.gui.msgbox import getTrue, msgBox

import binhex
import binascii
import struct

import ui.ico_64_rc

import json

#~ Table of CRC values for high–order byte
auchCRCHi = [
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40]

#~ Table of CRC values for low–order byte
auchCRCLo = [
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40]
##########################################################################

def crc16(data):
    uchCRCHi = 0xFF   # high byte of CRC initialized
    uchCRCLo = 0xFF   # low byte of CRC initialized
    uIndex   = 0x0000 # will index into CRC lookup table

    for ch in data :
        uIndex   = uchCRCLo ^ ord(ch)
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex]
        uchCRCHi = auchCRCLo[uIndex]
    return uchCRCLo, uchCRCHi, hex(uchCRCLo), hex(uchCRCHi), hex((uchCRCHi << 8 | uchCRCLo))
    #return (uchCRCHi << 8 | uchCRCLo)



#class HeartSettings(QtGui.QDialog):
#class Devices(QWidget, UILoader):
class Devices(QtGui.QDialog, UILoader):
    def __init__(self, _env):
#    def __init__(self):

        '''
        s = '' �� 
        print str(ord(s[0]))
        '''
        
        super(QWidget, self).__init__()
                
        self.setUI(_env.config, u"devices.ui")
        self.setEnabled(False)

        self.fnt =  QFont()
        self.fnt.setPixelSize(20)
 
        # Списки к массиву приборов        
        self.Numbering = []   # нумерация приборов
        self.Names = []       # наименования
        self.Types = []       # типы
        self.Measures = []    # единицы измерения
        self.Address = []     # адреса
        #14.01
        self.MinValues = []    # минимальное рабочее значение
        self.TestButtons = []  # кнопка тестирования
        
        # Стандартные наименования приборов        
        self.sNames = QtCore.QStringList()
        self.sNames.append(u'Амперметр')
        self.sNames.append(u'Вольтметр')
        
        self.sTypes = QtCore.QStringList()
        self.sTypes.append(u'ЩП02М')
        self.sTypes.append(u'ЩП02П')
        
        self.sMeasuresA = QtCore.QStringList()
        self.sMeasuresA.append(u'A')
        self.sMeasuresA.append(u'mA')
        self.sMeasuresA.append(u'kA')
        
        self.sMeasuresV = QtCore.QStringList()
        self.sMeasuresV.append(u'V')
        self.sMeasuresV.append(u'mV')
        self.sMeasuresV.append(u'kV')
        
        # Словарь для хранения данных по приборам
        self.data = {}
        self.read_json()
        self.refresh_devices()


        self.port = Serial()
#        print type(self.port.port)
#        self.port.port = self.env.config.devices.chp02m.port
#        print _env.config.devices.chp02m.port
        self.port.port = _env.config.devices.chp02m.port
#        self.port.port = 'COM1'
#        print type(_env.config.devices.chp02m.port)
#        print type(self.port.port)
        self.port.baudrate = 9600
        self.port.bytesize = 8
        self.port.parity = 'N'
        self.port.stopbits = 1
        self.port.timeout = 0.1

                
        self.ui.pushButton.setIcon(QIcon(u':/ico/ico/plus_64.png'))
        self.ui.pushButton_2.setIcon(QIcon(u':/ico/ico/trash_64.png'))
        self.ui.pushButton_3.setIcon(QIcon(u':/ico/ico/64_Exit.png'))
#        self.ui.pushButton_3.setIcon(QIcon(u':/ico/ico/close_32.png'))

        self.ui.pushButton.clicked.connect(self.pushButton_Click)
        self.ui.pushButton_2.clicked.connect(self.pushButton_2_Click)
        self.ui.pushButton_3.clicked.connect(self.pushButton_3_Click)
        #self.connect(self.ui.pushButton_3, QtCore.SIGNAL('triggered()'), QtCore.SLOT('close()'))

        
#        QtGui.QComboBox.setFocus()
#        QtGui.QPushButton.focusPolicy()
#        QtGui.QPushButton.fo        
#        self.ui.comboBox.setFocus()

    def testButton_Click(self):
        print self.data        
        self.toData()
        print self.data        
        for i in range(len(self.TestButtons)):
            if self.TestButtons[i] == self.sender():
                break
        try:
#            print self.data['devices'][str(i)]['ind_type']
           # print self.data['devices'][i]['ind_type']
            print 1
            self.port.close()
            print 2
            self.port.open()
            print 3

            if self.data['devices'][str(i)]['ind_type'] == 0:
                st = chr(self.data['devices'][str(i)]['address'])+chr(3)+chr(0)+chr(5)+chr(0)+chr(5)
            print 4
            if self.data['devices'][str(i)]['ind_type'] == 1:
                st = chr(self.data['devices'][str(i)]['address'])+chr(4)+chr(0)+chr(22)+chr(0)+chr(2)
            print 5
            st += chr(crc16(st)[0]) + chr(crc16(st)[1])

            print 6
            Val = self.ReadDevice(self.port, self.data['devices'][str(i)]['ind_type'], st)
            print 7
            if Val == None:
                print 8
                msgBox(self, u"Данные с прибора № " + str(i+1) + u' не читаются!')
            else:
                #Val = 3.3333    
                print 9
                msgBox(self, u"Показание прибора № " + str(i+1) + u': "' + str(Val) + '"')

        except SerialException:
            print u"Порт " + self.port.port + u' не открывается!'
            self.errStr = u"Порт " + self.port.port + u' не открывается!'
            msgBox(self, u"Порт " + self.port.port + u' не открывается!')
            return None
        except Exception:
            msgBox(self, u'Проблема с портом либо с приборами!')
            return None
        finally:
            self.port.close()


    def pushButton_Click(self):
        self.clear_devices()
        i = len(self.Numbering)
        self.add_device(i, True, 0, 0, 0, i+1, 0.01)
        self.refresh_devices()

    def pushButton_2_Click(self):
        if getTrue(self, u'Вы действительно хотите удалить\nвсе неактивные приборы?'):        
            self.clear_devices()
            self.remove_devices()
            self.refresh_devices()

    def pushButton_3_Click(self):
        self.close() 
 
    def ReadDevice(self, port, type_dev, command):
        # type_dev = 0 Чтение показания прибора типа ЩП02М
        # type_dev = 1 Чтение показания прибора типа ЩП02П через регистры
        try:
            print 11
            port.write(command)
            print 22
                        
            if type_dev == 0:
                print 33
                s = port.read(15)
                print 44
                print 's', s
                if len(s) < 13:
                    #self.errStr = u"Ошибка чтения показаний прибора с адресом: " + str(ord(command[0]))
                    return None            
                print s[8] + s[7] + s[10] + s[9] + s[12] + s[11]            
                return s[8] + s[7] + s[10] + s[9] + s[12] + s[11]
                
                
            if type_dev == 1:
                print 34
                s = port.read(16)
                print 35
                a1 = str(hex(ord(s[4])))[2:]
                print 36
                if len(a1) == 1:
                    a1 = '0' + a1
                print 37
                a2 = str(hex(ord(s[3])))[2:]
                if len(a2) == 1:
                    a2 = '0' + a2
                print 38
                a3 = str(hex(ord(s[6])))[2:]
                if len(a3) == 1:
                    a3 = '0' + a3
                print 39
                a4 = str(hex(ord(s[5])))[2:]
                if len(a4) == 1:
                    a4 = '0' + a4
                print 40
                a = a1 + a2 + a3 + a4
                print 41
                b = struct.unpack('<f', binascii.unhexlify(a))            
                print 42
                return str(b[0])
                
        
        except SerialException:
            ###isTestHeart = False
            self.errStr = u"Проблема работы прибора с адресом: " + command
            QMessageBox.warning(None, u"Предупреждение", u"Проблема работы прибора с адресом: " + command, QMessageBox.Ok)
            return None                            
        except Exception:
            ###isTestHeart = False
            self.errStr = u"Ошибка чтения показаний прибора с адресом: " + str(ord(command[0]))
            print u'Ошибка чтения показаний прибора!'
            return None

            
    def checkBox_Click(self):
        i = int(self.sender().objectName())
        check = self.sender().isChecked()
        self.Names[i].setEnabled(check)
        self.Types[i].setEnabled(check)
        self.Measures[i].setEnabled(check)
        self.Address[i].setEnabled(check)
        #14.01
        self.MinValues[i].setEnabled(check)
        self.TestButtons[i].setEnabled(check)


    def read_json(self):
        # Чтение параметров с devices.json файла, если таковой имеется
        try:
            f = open('devices.json','r')
            self.data = json.load(f)
            for i in range(len(self.data['devices'])):
                try:
                    min_value = self.data['devices'][str(i)]['min_value']
                except Exception:
                    min_value = 0.01
                    
                self.add_device(i, 
                                self.data['devices'][str(i)]['activ'],
                                self.data['devices'][str(i)]['ind_name'],
                                self.data['devices'][str(i)]['ind_type'],
                                self.data['devices'][str(i)]['ind_measure'],
                                self.data['devices'][str(i)]['address'],
                                min_value)
            self.ui.doubleSpinBox.setValue(self.data['accuracy']['r'])                                         
            self.ui.doubleSpinBox_2.setValue(self.data['accuracy']['a'])
            #3.06
            self.ui.checkBox.setChecked(self.data['min_alg'])              
            
            #19.02  
            self.ui.doubleSpinBox_3.setValue(self.data['pause'])  
            self.ui.comboBox.setCurrentIndex(self.data['ind_measureR'])

        except Exception:
            print u'Ошибка чтения devices.json!'
            self.data = {}


    def write_json(self):
        # ЗАПИСАТЬ
        f = open('devices.json','w')        
        self.toData()    
        json.dump(self.data, f)

        
    def toData(self):
        self.data = {}        
        self.data['devices'] = {}
        for i in range(len(self.Numbering)):            
            self.data['devices'][str(self.Numbering[i].objectName())] = {}
            self.data['devices'][str(self.Numbering[i].objectName())]['activ'] = self.Numbering[i].isChecked()
            self.data['devices'][str(self.Numbering[i].objectName())]['ind_name'] = self.Names[i].currentIndex()
            self.data['devices'][str(self.Numbering[i].objectName())]['ind_type'] = self.Types[i].currentIndex()
            self.data['devices'][str(self.Numbering[i].objectName())]['ind_measure'] = self.Measures[i].currentIndex()
            self.data['devices'][str(self.Numbering[i].objectName())]['address'] = self.Address[i].value()
            #14.01
            self.data['devices'][str(self.Numbering[i].objectName())]['min_value'] = self.MinValues[i].value()
            
            '''
            self.data['devices'][int(self.Numbering[i].objectName())] = {}
            self.data['devices'][int(self.Numbering[i].objectName())]['activ'] = self.Numbering[i].isChecked()
            self.data['devices'][int(self.Numbering[i].objectName())]['ind_name'] = self.Names[i].currentIndex()
            self.data['devices'][int(self.Numbering[i].objectName())]['ind_type'] = self.Types[i].currentIndex()
            self.data['devices'][int(self.Numbering[i].objectName())]['ind_measure'] = self.Measures[i].currentIndex()
            self.data['devices'][int(self.Numbering[i].objectName())]['address'] = self.Address[i].value()
            #14.01
            self.data['devices'][int(self.Numbering[i].objectName())]['min_value'] = self.MinValues[i].value()
            '''
                        
        self.data['accuracy'] = {}
        self.data['accuracy']['r'] = self.ui.doubleSpinBox.value()
        #19.02
        self.data['accuracy']['a'] = self.ui.doubleSpinBox_2.value()
        #3.06
        self.data['min_alg'] = self.ui.checkBox.isChecked()
        self.data['pause'] = self.ui.doubleSpinBox_3.value()
        self.data['ind_measureR'] = self.ui.comboBox.currentIndex()
        
     #   print self.data
                    

    def comboBox_currentIndexChanged(self, ind):
        i = int(self.sender().objectName())
        self.Measures[i].clear()
        if ind == 0:
            self.Measures[i].addItems(self.sMeasuresA)
        else:    
            self.Measures[i].addItems(self.sMeasuresV)
        self.Measures[i].setCurrentIndex(0)


    def add_device(self, i, activ, ind_name, ind_type, ind_measure, address, min_value):
        #QtGui.QCheckBox.clicked()
        self.Numbering += [QtGui.QCheckBox('   ' +str(i+1))]
        self.Numbering[i].setObjectName(str(i))
        self.Numbering[i].setChecked(activ)
        self.Numbering[i].setMaximumWidth(70)
        self.Numbering[i].setFont(self.fnt)
        self.Numbering[i].clicked.connect(self.checkBox_Click)
        self.Numbering[i].setVisible(False)

        #QtGui.QComboBox.clear()
        self.Names += [QtGui.QComboBox()]
        self.Names[i].setObjectName(str(i))
        self.Names[i].addItems(self.sNames)
        self.Names[i].setCurrentIndex(ind_name)
        self.Names[i].setFont(self.fnt)
        self.Names[i].setEnabled(activ)
        #self.Names[i].changeEvent.connect(self.comboBox_changeEvent)
        self.Names[i].currentIndexChanged['int'].connect(self.comboBox_currentIndexChanged)
        self.Names[i].setVisible(False)
            
        self.Types += [QtGui.QComboBox()]
        self.Types[i].addItems(self.sTypes)
        self.Types[i].setCurrentIndex(ind_type)
        self.Types[i].setFont(self.fnt)
        self.Types[i].setEnabled(activ)
        self.Types[i].setVisible(False)
        
        self.Measures += [QtGui.QComboBox()]
        if ind_name == 0:
            self.Measures[i].addItems(self.sMeasuresA)
        else:            
            self.Measures[i].addItems(self.sMeasuresV)
        self.Measures[i].setCurrentIndex(ind_measure)
        self.Measures[i].setMaximumWidth(100)
        self.Measures[i].setFont(self.fnt)
        self.Measures[i].setEnabled(activ)
        self.Measures[i].setVisible(False)
                        
        self.Address += [QtGui.QSpinBox()]
        self.Address[i].setValue(address)
        self.Address[i].setAlignment(QtCore.Qt.AlignCenter)
        #self.Address[i].setMaximumWidth(70)
        self.Address[i].setMinimumWidth(70)
        self.Address[i].setFont(self.fnt)
        self.Address[i].setEnabled(activ)
        self.Address[i].setVisible(False)
        
        #14.01
        
       # self.MinValues += [QtGui.QSpinBox()]
        self.MinValues += [QtGui.QDoubleSpinBox()]
        self.MinValues[i].setValue(min_value)
        self.MinValues[i].setSingleStep(1.0)

        #20.01        
        self.MinValues[i].setMaximum(100000)
        self.MinValues[i].setDecimals(5)
                
        self.MinValues[i].setAlignment(QtCore.Qt.AlignCenter)
        #self.MinValues[i].setMaximumWidth(100)
        self.MinValues[i].setMinimumWidth(100)
        self.MinValues[i].setFont(self.fnt)
        self.MinValues[i].setEnabled(activ)
        self.MinValues[i].setVisible(False)
        
        self.TestButtons += [QtGui.QPushButton()]
        #QtGui.QPushButton.setT
        self.TestButtons[i].setText(u'Проверить')
        #self.TestButtons[i].setAlignment(QtCore.Qt.AlignCenter)
        #self.TestButtons[i].setMaximumWidth(50)
        self.TestButtons[i].setFont(self.fnt)
        self.TestButtons[i].setEnabled(activ)
        self.TestButtons[i].setVisible(False)
        self.TestButtons[i].clicked.connect(self.testButton_Click)
        self.TestButtons[i].setFocusPolicy(QtCore.Qt.NoFocus)
        #QtGui.QPushButton.setFocusPolicy()
                
        
    def clear_devices(self):
        for i in range(len(self.Numbering)):
            self.ui.gridLayout.removeWidget(self.Numbering[i])
            self.ui.gridLayout.removeWidget(self.Names[i])
            self.ui.gridLayout.removeWidget(self.Types[i])
            self.ui.gridLayout.removeWidget(self.Measures[i])
            self.ui.gridLayout.removeWidget(self.Address[i])
            #14.01
            self.ui.gridLayout.removeWidget(self.MinValues[i])
            self.ui.gridLayout.removeWidget(self.TestButtons[i])            
            
            self.Numbering[i].setVisible(False)
            self.Names[i].setVisible(False)
            self.Types[i].setVisible(False)
            self.Measures[i].setVisible(False)
            self.Address[i].setVisible(False)
            #14.01
            self.MinValues[i].setVisible(False)
            self.TestButtons[i].setVisible(False)
            
            

    def refresh_devices(self):
        for i in range(len(self.Numbering)):
            
            #QtGui.QLayoutItem.setAlignment(QtCore.Qt.AlignCenter)
            #QtGui.QGridLayout.itemAtPosition(int, int).
            
            self.ui.gridLayout.addWidget(self.Numbering[i], i + 1, 1)
            self.ui.gridLayout.addWidget(self.Names[i], i + 1, 2)
            self.ui.gridLayout.addWidget(self.Types[i], i + 1, 3)
            self.ui.gridLayout.addWidget(self.Measures[i], i + 1, 4)
            self.ui.gridLayout.addWidget(self.Address[i], i + 1, 5)
            #14.01
            self.ui.gridLayout.addWidget(self.MinValues[i], i + 1, 6)
            self.ui.gridLayout.addWidget(self.TestButtons[i], i + 1, 7)
            
            self.Numbering[i].setVisible(True)
            self.Names[i].setVisible(True)
            self.Types[i].setVisible(True)
            self.Measures[i].setVisible(True)
            self.Address[i].setVisible(True)
            #14.01
            self.MinValues[i].setVisible(True)
            self.TestButtons[i].setVisible(True)
            
            
            for j in range(6):
                self.ui.gridLayout.itemAtPosition(i+1, j+1).setAlignment(QtCore.Qt.AlignCenter)
            
            
            


    def remove_devices(self):
        # Удаление всех неактивных устройств из списка с перенумерацией
        for i in reversed(range(len(self.Numbering))):
            if not self.Numbering[i].isChecked():
                self.Numbering.pop(i)
                self.Names.pop(i)
                self.Types.pop(i)
                self.Measures.pop(i)
                self.Address.pop(i)
                #14.01
                self.MinValues.pop(i)
                self.TestButtons.pop(i)
        for i in range(len(self.Numbering)):
            self.Numbering[i].setText('   ' + str(i + 1))
            self.Numbering[i].setObjectName(str(i))
        

    def closeEvent(self, event):
        self.write_json()
        

if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
     
    from dpframe.base.envapp import checkenv
    from dpframe.base.inits import json_config_init
    from dpframe.base.inits import default_log_init
    from electrolab.gui.inits import serial_devices_init
       
    @serial_devices_init
    @json_config_init
    @default_log_init    
    class ForEnv(QtGui.QWidget):
        def getEnv(self):
            return self.env
    objEnv = ForEnv()
    env = objEnv.getEnv()
                            
    wind = Devices(env)
    wind.setEnabled(True)
    wind.show()
    sys.exit(app.exec_())
